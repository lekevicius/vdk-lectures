@import url(http://fonts.googleapis.com/css?family=Metamorphous);
@import url(http://fonts.googleapis.com/css?family=Josefin+Sans:700);

/*
  Taip atrodo komentaras CSS faile: jis prasideda slash-žvaigždutė, baigiasi žvaigždutė-slash.

  Pirmos dvi eilutės pakrauna du šriftus iš Google Web Fonts.
  @import nurodo kitą CSS failą, šie yra iš Google. Galite atsidaryti tuos adresus, ir pamatysite, kad ten tiesiog kitas CSS failas.
  Šios eilutės turi būti pradžioje, antraip neveiktų.

  Bendrai šis dokumentas turi tokią struktūrą:
  - Pradžioje yra įvairių demonstracijų kodas, sugrupuotas pagal demonstraciją. 
    Naujos CSS taisyklės ir jų reikšmės yra pakomentuotos.

  - Kiekviena demonstracija yra šiek tiek sudėtingesnė už kitą, ir bendrai CSS turi nemažą kiekį "hackų": 
    būdų kažką priversti dirbti / atrodyti kaip norime, nebūtinai pačiu paprasčiausiai suprantamu būdu. Deja, taip yra.

  - Po demonstracijų eina viso likusio puslapio dizaino CSS.
    Vėlgi, jis nėra pats paprasčiausias, tačiau demonstruoja įvairias technikas.

  Nepamirškite, kad daugiau informacijos apie kiekvieną CSS taisyklę galite rasti MDN.
  CSS gali būti labai lengvai sulūžti jei praleisite kažkokį ženklą ar reikšmę.

  Pradėkime!
*/


/********** PIRMAS PAVYZDYS - PAPRASTAS BLOKAS **********/


.css-example-basic {
  /*
    CSS blokai susideda iš dviejų dalių: selektoriaus ir taisyklių.
    Ši struktūra yra gana paprasta.

    Selektorius yra būdas pasirinkti HTML elementus.

    p { ... } pasirenka visus <p> elementus.
    p, h1, h2 { ... } pasirenka visus <p>, <h1> ir <h2> elementus.
    h1 a { ... } pasirenka visus <a> elementus kurie yra <h1> viduje.

    .container { ... } pasirenka visus elementus, kurie turi class="container".
    #page { ... } pasirenka elementą, kuris turi id="page".

    Selektorius galima įvairiai jungti.
    Geras mokomasis žaidimas yra CSS Diner: http://flukeout.github.io


    Po selektoriaus eina vingiuoti skliaustai, o jų viduje taisyklės. 
    Taisyklės turi vienodą formą:

    taisyklė: reikšmė;
    kita-taisyklė: jos-reikšmė kartais-gali-būti iš-kelių-žodžių;

    Žemiau yra daug to pavyzdžių.
    Visas CSS sudėtingumas yra taisyklių ir jų reikšmių žinojimas, ir gebėjimas kūrybiškas jas išnaduoti.
  */
  background: url(../images/examples/brickwall.png);
  /*
    background yra fono taisyklė. Ji gali nurodyti į paveikslėlį, kaip nurodo ši. Tai pat gali būti spalva:
    background: red;
    background: #ff9900;
    background: #f90;
  */
  padding: 1px;
  /*
    Padding yra vidiniai elemento tarpai. 
    Galima įsivaizduoti knygos lapą: padding bus atstumas nuo lapo krašto iki vietos, kurioje jau rašomas tekstas.

    Tiek padding, tiek margin gali turėti kelias skirtingas reikšmių formas:

    padding: 10px; - padaro, kad iš visų keturių šonų tarpai yra po 10px.
    padding: 10px 20px; - padaro, kad tarpai iš viršaus ir apačios yra 10px, o iš šonų - po 20px.
    padding: 11px 12px 13px 14px; - padaro, kad tarpas iš viršaus yra 11px, iš dešinės 12px, iš apačios 13px, iš kairės 14px.
    padding: 0; - nuima vidinius tarpus.
  */
  border-radius: 10px;
  /*
    Border-radius užapvalina elemento kampus nurodytu spinduliu.
  */
  margin-top: 40px;
  /*
    Margin yra elemento išorės tarpai.
    Knygos pavyzdyje - tai kiek vietos yra aplink pačią knygą, tarp kitų daiktų.

    Čia yra kitas būdas užrašyti tarpus: galima nurodyti konkretų šoną ir duoti tam reikšmę.
    Tas pats galiotų ir su padding.
  */
  margin-bottom: 40px;
}

.css-example-basic .brick {
  width: 240px;
  height: 100px;
  /*
    Width ir Height norodo elemento dydį. Paprasta ir aišku.
  */
  margin: 108px auto 96px auto;
  /*
    Margin čia veikia panašiai, kaip komentare apie padding.
    Speciali ir nauja reikšmė yra auto.

    Margin atveju, jei abi šoninės reikšmės yra auto, elementas su fiskuotu pločiu bus horizontaliai centruotas.
  */
  padding: 30px 20px;
  /*
    Tokia taisyklė padaro, kad viršus ir apačia turi vidinius tarpus po 30px, o šonai - po 20px.
  */
  background: #fafafa;
  /*
    Fono spalvos pavyzdys. Tokias raidines reikšmes galima paimti iš Photoshop spalvų pickerio.
  */

  border-top: 4px solid #760000;
  /*
    Border taisyklės leidžia uždėti rėmus.
    Ši taisyklė uždeda tik viršutinį rėmą.

    Border taisyklė susideda iš 3 dalių: pločio, stiliaus ir spalvos.
  */

  box-shadow: 0 4px 16px rgba(32, 10, 8, 0.3);
  /*
    Box-shadow taisyklė yra gana sudėtinga, bet efektinga. 
    Jos reikšmių dalys yra: x-postūmis y-postūmis blur-dydis spalva.

    Čia spalva yra nurodyta kaip RGBA, nurodant kiekvieno iš keturių kanalų reikšmes: red, green, blue, alpha (permatomumas).
  */
}

.css-example-basic .brick strong {
  display: block;
  /*
    Savaime <strong> būtų tekstinis elementas (display: inline), ir nesukurtų naujos eilutės.
    Elementą galima paversti blokiniu su display: block; taisykle.
  */
  font-size: 1.2em;
  /*
    EM yra reliatyvus šrifto dydis, ir čia reiškia "1.2 karto didesnis nei tekstas aplink".
  */
  color: #60201b;
}


/********** ANTRAS PAVYZDYS - PAPRASTA TIPOGRAFIJA **********/


.css-example-typography p {
  font-family: Goudy Old Style, Garamond, Big Caslon, Times New Roman, serif;
  /*
    Font-family taisyklė leidža pakeisti šriftą. 
    Šriftai rašomi sąrašu, atskirtu kableliais. 
    Naršyklė stengsis parinkti kuo geriau tinkantį šriftą: pradės nuo pirmo, jei jis nėra instaliuotas tikrins antrą, ir taip toliau..
    Todėl labai svarbu sąrašą pabaigtą viena iš bendrinių reikšmių: serif, sans-serif arba monospace.
  */
  font-size: 16px;
  /*
    Font-size nurodytas pixeliais pakeičia šrifto dydį į nurodytą.
  */
  line-height: 1.5;
  /*
    Line-height irgi yra reliatyvus šrifto dydis. 
    Dažniausiai reikšmė 1 reiškia "susigrūdęs tekstas, bet eilutės nelipa viena ant kitos".
    Reikšmė 1.4 arba 1.5 (pusantro karto daugiau nei standartiškai) yra geriausiai atrodančios.
  */
  text-align: justify;
  /*
    Teksto lygiavimas. Tekstą galima lygiuoti left, right, center arba justify.
  */

  padding-top: 40px;
  padding-bottom: 40px;
  padding-left: 20px;
  padding-right: 20px;
  /*
    Tai yra tas pats, kaip rašyti
    padding: 40px 20px;
    arba
    padding: 40px 20px 40px 20px;
  */
}

.css-example-typography p::first-line {
  /*
    Čia yra įdomus selektorius: jis pasirenka "virtualų elementą", tik pačią pirmą eilutę.
  */
  font-size: 20px;
  font-style: italic;
  /*
    Font-style gali būti normal arba italic (palinkęs tekstas).
  */
  letter-spacing: 1px;
  /*
    Letter-spacing nurodo papildomą tarpą tarp raidžių. Nepersistenkite.
  */
}

.css-example-typography p::first-letter {
  font-weight: bold;
  /*
    Font-weight gali būti bold arba normal. Bold yra... bold.
  */
  font-style: normal;
  /*
    Kadangi ::first-line buvo italic, ::first-letter irgi būtų italic (nes pirma raidė yra pirmos eilutės dalis).
    Tą galima nuimti pasirinkus font-style: normal;
  */
  font-size: 90px;
  float: left;
  /*
    Float yra turbūt sunkiausiai suprantama CSS taisyklė.
    Ji sukuria būtent tokį efektą, kokį matote: elementas iššoka iš teksto ir "įsistato" į tam tikrą šoną.
    Šita raidė užima teksto kairį viršutinį kampą dėl float taisyklės.
  */
  margin-right: 20px;
  margin-bottom: 10px;

  line-height: 1;
  /*
    Pirmai raidei nuimu padidintą eilutės aukštį, jog nebūtų per daug vietos iš apačios.
  */
}


/********** TREČIAS PAVYZDYS - SUDĖTINGESNĖ TIPOGRAFIJA **********/


.css-example-advanced-typography ul {
  font-family: 'Metamorphous', serif;
  /*
    Metamorphus yra vienas iš šriftų, kuris pakrautas iš Google Web Fonts šio failo pradžioje.
    Kadangi žinome, kad jis bus parsiųstas, nereikia nurodyti daug alternatyvų - tik bazinę.
  */
  list-style: none;
  /*
    <ul> savaime yra sąrašo elementas, ir turi taškelius.
    Su List-style juos galima nuimti arba pakeisti į kitą simbolį.
  */
  padding: 0;
  margin: 40px 0;
  text-align: center;
  -webkit-columns: 3;
  -webkit-column-gap: 20px;
  /*
    Columns ir Column-gap yra eksperimentinės žymės: todėl jos turi "-webkit-" priešdėlį.

    Jos leidžia išdėlioti tekstą keliais stulpeliais, su nurodytu tarpu tarp stulpelių.
  */
}

.css-example-advanced-typography li {
  padding: 10px 0 7px 0;
  margin-bottom: 20px;
  border-bottom: 3px double #aaa;
  /*
    Apatinio rėmelio pavyzdys. Šis naudoja ne "solid", "double" stilių.
  */
}


/********** KETVIRTAS PAVYZDYS - ANIMACIJA **********/

/*
  Perspėjimas: šis pavyzdys sudėtingas, ir pilnas daug naujų CSS taisyklių.
  Gali būti sunku susigaudyti, jei dar tik pradedate suprasti CSS.
*/

.css-example-animations {
  -webkit-perspective: 1000;
  /*
    Perspective yra eksperimentinė, mistiška reikšmė. 
    Jei reikalinga sukurti 3D efektą. 
    Kuo skaičius mažesnis, tuo 3D efektas stipresnis.
  */
}

.css-example-animations .flag {
  background: #ad0000 url(../images/examples/flag.png) center center no-repeat;
  background-size: cover;
  /*
    Čia vienoje vietoje yra beveik visos Background reikšmės galimybės.
    Šis fonas turi ir spalvą, ir paveiksliuką.
    Paveiksliukas yra centruotas pagal x ir y ašį ir yra nekartojamas kaip tekstūra (no-repeat).
    Kita taisyklė, background-size, garantuoja kad paveiksliukas visada uždengs visą elementą, nesvarbu koks jo dydis bebūtų.
  */
  height: 300px;
  border-radius: 10px;
  margin-top: 40px;
  margin-bottom: 40px;
  position: relative;
  /*
    Position relative gali būti sunku suprasti.
    Ši taisyklė savaime beveik nieko nedaro, tačiau jei ją uždedi elementus, 
    visi jos viduje esantys elementai turintys position: absolute bus reliatyvūs šiam blokui.

    Kitaip tariant, jei position: relative nebūtų, .sigil, kuris turi position: absolute, būtų viso puslapio centre.
    Kadangi šis blokas turi position: relative, .sigil pasaulis apsiriboja šiuo elementu, ir .sigil bus šio elemento centre.
  */
  overflow: hidden;
  /*
    Overflow: hidden garantuoja, kad niekas neišlys iš šio elemento ribų.
  */
  -webkit-transform: translate3d(0, 0, 0);
  /*
    Tokia eilutė yra "hackas".
    Ji įjungia elemento 3D transformacijas, ir jo animacijos vyks sklandžiau.
    Šią eilutę verta naudoti visur, kur naudojate transformacijas ir animacijas.
  */
  transition: all 0.6s;
  /*
    Transition yra taisyklė, kuri sukuria visas animacijas.
    Ši taisyklė nurodo, kad jei elementui turėtų keistis bet kurios CSS taisyklės (all) reikšmė,
    jog ji pasikeistų ne iškarto, o per 0.6s.
  */
}

.css-example-animations .sigil {
  width: 180px;
  height: 180px;
  position: absolute;
  top: 50%;
  left: 50%;
  margin: -90px 0 0 -90px;
  /*
    Šios šešios CSS taisyklės kartu sukuria horizontalų ir vertikalų centravimą.
    Tai dar vienas "hackas", ir ne pats paprasčiausias.

    Pirma elementui duodame fiksuotą aukštį ir plotį.
    Tada su position: absolute;, top: 50%; ir left: 50%; padarome taip, 
    kad elemento viršutinis kairysis kampas atsiranda .flag centre.
    Galiausiai, su neigiamais viršaus ir kairės šonais patraukiame elementą per pusę jo dydžio atgal.

    Rezultatas yra vertikaliai ir horizontaliai centruotas elementas.
  */
  background: url(../images/examples/sigil.png) no-repeat;
  opacity: 0.7;
  /*
    Opacity padaro elementą permatomą. 1 yra visai nepermatomas. 0 yra nematomas.
  */
  transition: all 0.9s;
}

.css-example-animations .text {
  width: 300px;
  height: 100px;
  position: absolute;
  top: 180px;
  left: 50%;
  margin-left: -150px;
  /*
    Šis elementas naudoja panašų centravimą kaip .sigil, tačiau centruoja tik horizontaliai.
  */
  text-align: center;
  color: #fff;

  font-family: Goudy Old Style, Garamond, Big Caslon, Times New Roman, serif;
  text-transform: uppercase;
  /*
    Text-transform transformuoja tekstą: uppercase paverčia visas raides didžiosiomis.
  */
  letter-spacing: 3px;

  -webkit-transform: translate(0, 160px) scale(1.4);
  /*
    Tai yra pirma tikra CSS transformacija.
    Ji turi dvi reikšmes, atskirtas tarpu.

    Pirma reikšmė - translate - pastumia objektą per 0 x ašimi, ir per 160px y ašimi.
    Scale reikšmė išdidina elementą.
  */
  -webkit-filter: blur(20px);
  /*
    CSS filtrai yra visiškai eksperimentiniai, bet leidžia pasiekti blur efektą.
  */
  opacity: 0.3;
  transition: all 1s;
}

.css-example-animations .text h4 {
  font-size: 30px;
  color: #c1933a;
}

.css-example-animations .text .family {
  color: rgba(205, 163, 74, 0.7);
}

.css-example-animations .flag:hover {
  /*
    Čia pirmą kartą matosi :hover selektorius.
    Tokie dvitaškio selektoriai leidžia pasirinkti elementą specialiose situacijose.
    Konkrečiai, :hover taisyklės galioja tik tuomet, kai pelė yra užvesta ant pasirinkto elemento.

    Šiuo atveju tai naudojama animacijai: elementai turi vienokį stilių paprastai,
    ir kitokį stilių kai pelė yra užvesta ant .flag elemento.
    Perėjimai tarp šių situacijų yra animuoti su transition taisykle.
  */
  background-color: red;
  -webkit-transform: scale(1.1) rotateX(18deg);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6);
  /*
    Šios trys taisyklės - fono spalva, transformacija ir šešėlis pasikeičia,
    kai pelė užvedama ant elemento. 
    Iš jų įdomiausia yra taisyklės dalis rotateX(18deg).
    RotateX nurodo vieną iš 3 3D transformacijos ašių - X ašį.
    Todėl posūkis yra ne 2D, o 3D erdvėje.
    Su CSS elementus gali judinti ir sukioti visomis trimis ašimis.
  */
}

.css-example-animations:hover .sigil {
  -webkit-transform: scale(0.5) translate(0, -120px);
  opacity: 1;
}

.css-example-animations:hover .text {
  -webkit-transform: scale(1) translate(0, 0);
  /*
    Scale(1) atstato scale yra standartinį dydį.
    Translate(0, 0) atstato elementą į jo paprastą vietą (t.y. nuima prieš tai nustatytą translate reikšmę).
  */
  -webkit-filter: blur(0);
  /*
    Blur(0) nuima blurą - elementas išryškėja animuotai.
  */
  opacity: 1;
}


/********** PENKTAS PAVYZDYS - BOOTSTRAP LAYOUT **********/


.boostrap-demo-layout .row {
  margin-bottom: 24px;
  margin-top: 24px;
}

.boostrap-demo-layout .row  div {
  text-align: center;
  background: hsla(45, 80%, 63%, 0.2);
  /*
    HSLA yra dar vienas būdas nurodyti spalvas CSS.
    Jis reiškia Hue-Saturation-Lightness-Alpha.
    Hue yra skaičius nuo 0 iki 360, spalvos kampas spalvų rate.
    Saturation yra skaičius nuo 0% iki 100%, spalvos sodrumas. 0% yra pilka spalva.
    Lightness, nuo 0% iki 100%, yra spalvos šviesumas. 0% yra juoda. 100% yra balta.
    Alpha, kaip ir RGBA, yra permatomumas, skaičius nuo 0 iki 1.
  */
  border-radius: 2px;
  padding-top: 6px;
  padding-bottom: 6px;
  text-transform: uppercase;
  font-size: 10px;
  font-weight: bold;
  color: hsla(45, 80%, 20%, 0.4);
}

.boostrap-demo-layout .row  div div {
  padding-top: 12px;
  padding-bottom: 12px;
  margin-top: 8px
}


/********** ŠEŠTAS PAVYZDYS - BOOTSTRAP KARUSELĖS PLUGINAS **********/


/*
  Bootstrap automatiškai nustato labai daug CSS taisyklių, jog jų karuselės pluginas veiktų.
  Žemiau esantis CSS yra skirtas pakeisti automatinį dizainą.
*/

#carousel-example-generic {
  margin: 40px 0;
  background: #dfcbbb url(../images/examples/flag.png) center center no-repeat;
  background-size: cover;
  /*
    Visam blokui uždedamas fonas. Dar vienas pavyzdys, kuriame naudojamos visos background taisyklės savybės.
  */
}

.carousel-slide {
  height: 300px;
  /*
    Kiekviena "skaidrė" turi fiksuotą aukštį.
  */
}

.carousel-slide p {
  font-family: Goudy Old Style, Garamond, Big Caslon, Times New Roman, serif;
  letter-spacing: 1px;
  
  font-size: 24px;
  color: #fff;
  opacity: 0.7;
  /*
    Šios taisyklės keičia matomą dizainą: šriftus, spalvą, permatomumą. Nieko įspūdingo.
  */

  text-align: center;
  /*
    Text-align: center; pasirūpina, kad tekstas būtų centruotas.
    Jei žemiau esančių taisyklių nebūtų, paragrafas būtų per visą skaidrės 
    plotį (eitų iki pat kraštų), bet būtų centruotas.
  */

  width: 70%;
  margin-left: auto;
  margin-right: auto;
  /*
    Šios trys eilutės yra klasikinis būdas centruoti elementą horizontaliai.

    Nustatome width, kuris čia yra 70% apimančio elemento pločio (skaidrės pločio).
    Tai garantuoja, kad tekstas niekada nebus prilipęs prie šono, 
    ir yra pakankamas tarpas iki rodyklių karuselės šonuose.

    Tuomet nustatome abu šoninius margin į auto.
    Tai lemia, kad margin automatiškai pasidalins visą laisvą vietą aplink elementai.
    Šiuo atveju, laisvos vietos yra 30% (elementas sako, kad nori 70% pločio).
    Šoniniai margin'ai pasidalins po 15%, ir elementas bus horizontaliai centruotas.
  */

  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  /*
    Šios trys eilutės yra moderniausias būdas centruoti elementą vertikaliai.
    Bendrai CSS tai yra didelė problema, su daug sudėtingų sprendimų, bet šis būdas veikia neblogai.
    Jis pastumia elementą 50% žemyn per jį talpinančio elemento aukštį,
    ir tuomet grąžina 50% aukštyn per pačio elemento aukštį.

    Sudėtinga, nebūtina suprasti, veikia.
  */
}

.carousel-indicators {
  bottom: 0;
  /*
    Mažas Bootstrap dizaino pataisymas.
  */
}


/********** SEPTINTAS PAVYZDYS - JAVASCRIPT LAIKRODIS **********/


.javascript-clock-demo {
  background: #e3e7e8;
  position: relative;
  height: 500px;
  border-radius: 10px;
  margin: 40px 0;
}

.javascript-clock-demo .clock {
  position: absolute;
  width: 460px;
  height: 460px;
  margin: -230px 0 0 -230px;
  top: 50%;
  left: 50%;
  /*
    Šios šešios eilutės aptartos anksčiau - bet jos yra vienas iš būdų centruoti
    elementą horizontaliai ir vertikaliai, kai jo dydis yra žinomas.
  */
  background: url(../images/clock/clock.png) no-repeat;
  -webkit-transform: translate3d(0, 0, 0);
}

.javascript-clock-demo .clock div {
  /*
    Trys rodyklės ir trys jų šešėliai visi yra <div> elementai - toks yra greitas būdas pasirinkti visus 6 iš karto.
    Šios taisklės galioja visoms rodyklėms ir jų šešėliams.
  */
  position: absolute;
  top: 70px;
  left: 70px;
  /*
    Apimantis elementas (.clock) turėjo postion: absolute, 
    todėl position: absolute koordinatės jo viduje
    (70px nuo viršaus ir 70px iš kairės) priklauso nuo jo.
    Bendrai su position reikšmėmis reikia pažaisti, norint jas suprasti.
  */
  width: 320px;
  height: 320px;
  background: no-repeat;
  transition: all 0.3s;
}

.javascript-clock-demo #hours-shadow   { background-image: url(../images/clock/hoursShadow.png); }
.javascript-clock-demo #hours          { background-image: url(../images/clock/hours.png); }
.javascript-clock-demo #minutes-shadow { background-image: url(../images/clock/minutesShadow.png); }
.javascript-clock-demo #minutes        { background-image: url(../images/clock/minutes.png); }
.javascript-clock-demo #seconds-shadow { background-image: url(../images/clock/secondsShadow.png); }
.javascript-clock-demo #seconds        { background-image: url(../images/clock/seconds.png); }
/*
  Nustatomi visi fonai.
*/

.javascript-clock-demo #hours-shadow, 
.javascript-clock-demo #minutes-shadow, 
.javascript-clock-demo #seconds-shadow {
  top: 73px;
  /*
    Šešėliai yra 3px žemiau nei rodyklės.
  */
}

.javascript-clock-demo #hours-shadow, 
.javascript-clock-demo #hours { 
  -webkit-transform: rotate(70deg); 
}
.javascript-clock-demo #minutes-shadow, 
.javascript-clock-demo #minutes { 
  -webkit-transform: rotate(122deg); 
}
.javascript-clock-demo #seconds-shadow, 
.javascript-clock-demo #seconds { 
  -webkit-transform: rotate(260deg); 
}
/*
  Šis CSS nieko nedaro, nes jį pakeičia JavaScript kodas.
  Bet jei JavaScript nebūtų, rodyklės būtų statinės, pasisukusios nurodytu kampu.
  Būtent šitą CSS taisyklę ir keis JavaScript kodas.
*/


/********** AŠTUNTAS PAVYZDYS - JQUERY BURBULAI **********/


.jquery-demo {
  background: linear-gradient(#d8b8e1, #f1eaf8);
  /*
    Su linear-gradient reiškme fonui labai lengva nustatyti gradientą (spalvų perėjimą).
    MDN turi pilną dokumentaciją, kaip keisti kampus, pridėti daugiau spalvų ir t.t.
  */
  position: relative;
  height: 500px;
  border-radius: 10px;
  overflow: hidden;
  /*
    Garantuoja kad burbulai neišlįs iš skirtų ribų.
  */
  margin: 40px 0;

  -webkit-transform: translate3d(0, 0, 0);
}

.jquery-demo .ball {
  border-radius: 50%;
  position: absolute;
  cursor: pointer;
  /*
    Cursor leidžia pakeisti pelės kursorių.
    Default yra paprasta pelytė (rodyklė).
    Pointer yra ranka su ištiestu pirštu, ir nurodo interaktyvumą.
    Yra ir daugiau reikšmių.
  */

  -webkit-transform-origin: 50% 50%;
  /*
    Standartiškai objekto transformacijų taškas yra kairėje viršuje:
    keičiant objekto dydį jis keičiasi ne iš centro, o iš kampo.
    Ši taisyklė pajudina tą tašką į elemento centrą.
  */

  transition: all 0.3s;
}

.jquery-demo .ball:hover {
  -webkit-transform: scale(1.3);
  /*
    Užvedus pele elementas šiek tiek padidėja.
  */
}


/********** DEVINTAS PAVYZDYS - PORTFOLIO PUSLAPIS **********/


.portfolio-example {
  background: url(../images/examples/portfolio/background.png);
  /*
    Pasikartojantis fonas.
  */
  padding: 40px 0;
  margin: 40px 0;
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
}

.portfolio-example .header {
  font-family: 'Josefin Sans', sans-serif;
  /*
    Dar vienas šriftas iš Google Web Fonts.
  */
  text-transform: uppercase;
  margin-bottom: 30px;
}

.portfolio-example .header h3 {
  letter-spacing: 2px;
  font-size: 36px;
}

.portfolio-example .header .tagline {
  letter-spacing: 4px;
  /*
    Smarkiai padidintas tarpas tarp raidžių.
  */
  opacity: 0.5;
  font-size: 20px;
}

.portfolio-example .sidebar ul {
  list-style: none;
  padding: 0;
  /*
    Šios taisyklės padaro sąrašą nepanašų į sąrašą - ko ir noriu:
    nuima taškelius ir atitraukimą nuo krašto.
  */
}

.portfolio-example .sidebar li {
  margin: 0 0 30px 0;
  /*
    Kiekvienas šoninio meniu punktas turi nemažą tarpą po savimi.
  */
}

.portfolio-example .sidebar a {
  background-color: #fff;
  padding: 10px;
  color: #723435;
  font-weight: bold;
  transition: all 0.3s;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  /*
    Aprašo, kaip atrodo meniu puntai: baltas fonas, storesnis šriftas, tamsiai raudona spalva...
  */
}

.portfolio-example .sidebar a:hover,
.portfolio-example .sidebar a.current {
  /*
    Šie du selektoriai pasirenka meniu nuorodas dviem atvejais:
    Kai pelė yra užvesta ant elemento (:hover)
    ARBA
    Kai nuoroda <a> turi class="current".

    Tai labai dažna technika išskirti "atidarytą" meniu punktą.
    Žinoma, šių dviejų selektorių stiliai galėtų ir skirtis.
  */
  text-decoration: none;
  /*
    Standartiškai užvestos nuorodos turi pabraukimą apačioje.
    Ši taisyklė nuima tą pabraukimą.
  */
  color: #e8151f;
  border-left: 4px solid #e8151f;
}

.portfolio-example .content {
  background: #fff;
  padding: 40px;
  /*
    Visas .content turinys atitraukiamas nuo kraštų per 40px...
    Hm, o kaip su antrašte, kurios fonas eina nuo krašto iki krašto?
  */
}

.portfolio-example .content h4 {
  margin: -40px -40px 40px -40px;
  /*
    Štai kaip su antrašte!
    Ji turi neigiamą tarpą aplink save: t.y., atitraukimas eina į priešingą pusę.
    Jei margin būtų didelis teigiamas skaičius, antraštė būtų atitraukta toliau nuo kraštų.
    Neigiamas skaičius reiškia, kad ji bus atitraukta arčiau kraštų!

    Tokie neigiami atitraukimai iš viršaus, dešinės ir kairės panaikinta tą padding: 40px;
    tik šiam vienam elementui.
  */

  background: url(../images/examples/portfolio/header.jpg) no-repeat;
  background-size: cover;

  font-family: 'Josefin Sans', sans-serif;
  text-transform: uppercase;
  text-align: center;
  font-size: 32px;
  color: #fff;
  letter-spacing: 5px;
  padding: 70px 0 58px 0;
  /*
    Pačios antraštės vidaus tarpai: tekstas atitrauktas nuo viršaus kiek labiau nei nuo apačios.
  */
}

.portfolio-example .gallery a {
  display: block;
  margin-top: 30px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  transition: all 0.3s;
}

.portfolio-example .gallery a:hover {
  -webkit-transform: rotate(3deg) scale(1.05);
  /*
    Ši taisyklė padaro, kad užvestas paveiksliukas vos vos padidėja ir pasisuka. Subtilu, gražu.
  */
  opacity: 0.8;
}




/********** DEMONSTRACIJŲ PABAIGA: TOLIAU EINA PAČIO PUSLAPIO DIZAINO CSS **********/




body {
  font-family: "freight-text-pro", serif;
  /*
    Šis komercinis šriftas kraunamas iš Typekit.
    (per <script> elementą HTML <head> dalyje).
  */
  font-size: 16px;
  line-height: 1.6;
  padding: 260px 0 60px 0;
}

a {
  color: #a450dc;
}
a:hover {
  color: #682f8d;
}
/*
  Nuorodų stilius paprastai ir užvedus pelę.
*/

code {
  /*
    Code elementas naudojamas mažiems kodo gabaliukams.
    Didžioji dalis jo dizaino ateina iš Bootstrap, aš tik pakeičiu kelias spalvas.
  */
  color: #5b456f;
  background-color: #f7f2fa;
  font-size: 0.8em;
}

small.caption {
  /*
    Elementas, kurį naudoju po Atom screenshotu.
  */
  font-style: italic;
  color: #aaa;
}

img.spaced {
  margin: 30px 0;
}
.padded {
  margin-bottom: 60px;
}
ul.checklist {
  list-style: circle;
}
ul.checklist h5 {
  font-size: 1.2em;
}
/*
  Keli atsitiktiniai elementai, šen bei ten.
*/


/********** PUSLAPIO HEADER - atsargiai, pavojingas (sudėtingas) CSS **********/


#header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  /*
    Headeris yra pilno pločio ir "prikabintas" viršuje.
  */
  background: white url(../images/header.jpg) center center no-repeat;
  background-size: cover;
  z-index: 10;
  /*
    Z-index rūpinasi elementų tvarka: kas ant ko viršaus. (Z ašis eina į vartotoją iš ekrano)
  */
  height: 220px;
  overflow: hidden;
  transition: all 0.4s;
}

#header a {
  transition: color 0.4s;
}

#header header .header-top {
  float: left;
}

#header header h1 {
  font-family: "freight-display-pro", serif;
  /*
    Dar vienas šriftas iš Typekit.
  */
  font-weight: 900;
  /*
    Kai šriftas turi daugiau storių nei normal / bold, jie dažnai nurodomi šimtais.
    100 yra extra-light / thin
    900 yra black.
  */
  font-size: 40px;
  margin: 60px 0 0 0;
  transition: all 0.4s;
}

#header header .tagline {
  font-size: 20px;
  margin-top: 10px;
  height: 30px;
  overflow: hidden;
  transition: all 0.4s;
}

#header header a:hover {
  text-decoration: none;
}

#header header ul {
  list-style: none;
  padding: 0;
  float: right;
  margin: 76px 0 0 0;
  transition: all 0.4s;
}

#header header li {
  float: left;
  margin: 0 0 0 30px;
  transition: all 0.4s;
}

#header li a {
  font-size: 20px;
  transition: all 0.4s;
}

/*
  Kai puslapis pascrollinamas, #header elementui JavaScript uždeda klasę "scrolled".
  Tuomet pradeda galioti visi #header.scrolled stiliai. Taip ir sukuriamas perėjimas.
*/

#header.scrolled {
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  height: 60px;
  background-position: center 60px;
  /*
    Headerio aukštis tampa 60px, o background paveiksliuko y pozicija - 60px.
    Rezultatas: backgroundas nebematomas! Valio!
  */
}

#header.scrolled header h1 {
  font-size: 28px;
  margin-top: 14px;
}

#header.scrolled header .tagline {
  width: 1;
  height: 0;
  opacity: 0;
}

#header.scrolled header ul {
  margin-top: 16px;
}

#header.scrolled header li {
  margin-left: 20px;
}

#header.scrolled li a {
  font-size: 18px;
}

#header.scrolled a {
  color: #666;
}


/********** PREZENTACIJŲ BLOKAS **********/


.presentations article a {
  display: block;
  box-shadow: 0 1px 3px rgba(0,0,0,0.3);
  border-radius: 6px;
  margin: 16px 0;

  -webkit-transform: translate3d(0,0,0);
  transition: all 0.3s;
}

.presentations article a:hover {
  -webkit-transform: scale(0.95);
  opacity: 0.8;
}

.presentations article a img {
  border-radius: 6px;
}

.presentations article p {
  font-style: italic;
  color: #888;
}


/********** SEKCIJŲ (HTML, CSS...) ANTRAŠTĖS **********/


.fancy-header {
  margin: 40px 0;
  padding: 80px 0;
  background: #d53a0a url(../images/fixedBackground.png) fixed;
  /*
    Kaip positions: fixed prikabina elementą fiksuotoje vietoje, ir jis nejuda scrollinant puslapį,
    taip background: ... fixed; prikabina fono paveiksliuką.

    Tai leidžia sukurti efektą, kur fono paveiksliukas nejuda kartu su elementu.
  */
  box-shadow: inset 0 4px 24px rgba(0, 0, 0, 0.4);
  text-align: center;
  color: #fff;
}

.fancy-header.html { background-color: #d53a0a; }
.fancy-header.css { background-color: #0076db; }
.fancy-header.bootstrap { background-color: #41177f; }
.fancy-header.js { background-color: #fff252; color: rgba(0,0,0, 0.7); }
.fancy-header.misc { background-color: #37a18a; }
/*
  Kiekviena antraštė turi savo fono spalvą, o JavaScript ir teksto spalvą.
  Bet visais kitais aspektais jos vienodos.
*/

.fancy-header h2 {
  font-size: 56px;
  margin: 0 0 30px 0;
  font-weight: 900;
  font-family: "freight-display-pro", serif;
}

.fancy-header p {
  font-size: 24px;
  line-height: 1.5;
  margin: 0;
  font-family: "freight-text-pro", serif;
  font-style: italic;
}


/********** MISC **********/

/*
  Čia nereikia žiūrėti ir suprasti. 
  Šitas CSS yra dalis Magnific Popup plugino...
*/

.mfp-with-zoom .mfp-container,
.mfp-with-zoom.mfp-bg {
  opacity: 0;
  -webkit-backface-visibility: hidden;
  /* ideally, transition speed should match zoom duration */
  -webkit-transition: all 0.3s ease-out; 
  -moz-transition: all 0.3s ease-out; 
  -o-transition: all 0.3s ease-out; 
  transition: all 0.3s ease-out;
}

.mfp-with-zoom.mfp-ready .mfp-container {
    opacity: 1;
}
.mfp-with-zoom.mfp-ready.mfp-bg {
    opacity: 0.8;
}

.mfp-with-zoom.mfp-removing .mfp-container, 
.mfp-with-zoom.mfp-removing.mfp-bg {
  opacity: 0;
}


/*
  Valio! Liko tik JavaScript!
*/
